!function(e){"object"==typeof exports&&"object"==typeof module?e(require("../../lib/codemirror")):"function"==typeof define&&define.amd?define(["../../lib/codemirror"],e):e(CodeMirror)}(function(e){"use strict";e.defineMode("scheme",function(){var e="comment";function t(e){for(var t={},n=e.split(" "),r=0;r<n.length;++r)t[n[r]]=!0;return t}var n=t("Î» case-lambda call/cc class define-class exit-handler field import inherit init-field interface let*-values let-values let/ec mixin opt-lambda override protect provide public rename require require-for-syntax syntax syntax-case syntax-error unit/sig unless when with-syntax and begin call-with-current-continuation call-with-input-file call-with-output-file case cond define define-syntax delay do dynamic-wind else for-each if lambda let let* let-syntax letrec letrec-syntax map or syntax-rules abs acos angle append apply asin assoc assq assv atan boolean? caar cadr call-with-input-file call-with-output-file call-with-values car cdddar cddddr cdr ceiling char->integer char-alphabetic? char-ci<=? char-ci<? char-ci=? char-ci>=? char-ci>? char-downcase char-lower-case? char-numeric? char-ready? char-upcase char-upper-case? char-whitespace? char<=? char<? char=? char>=? char>? char? close-input-port close-output-port complex? cons cos current-input-port current-output-port denominator display eof-object? eq? equal? eqv? eval even? exact->inexact exact? exp expt #f floor force gcd imag-part inexact->exact inexact? input-port? integer->char integer? interaction-environment lcm length list list->string list->vector list-ref list-tail list? load log magnitude make-polar make-rectangular make-string make-vector max member memq memv min modulo negative? newline not null-environment null? number->string number? numerator odd? open-input-file open-output-file output-port? pair? peek-char port? positive? procedure? quasiquote quote quotient rational? rationalize read read-char real-part real? remainder reverse round scheme-report-environment set! set-car! set-cdr! sin sqrt string string->list string->number string->symbol string-append string-ci<=? string-ci<? string-ci=? string-ci>=? string-ci>? string-copy string-fill! string-length string-ref string-set! string<=? string<? string=? string>=? string>? string? substring symbol->string symbol? #t tan transcript-off transcript-on truncate values vector vector->list vector-fill! vector-length vector-ref vector-set! with-input-from-file with-output-to-file write write-char zero?"),r=t("define let letrec let* lambda");function i(e,t,n){e.indentStack=new function(e,t,n){this.indent=e,this.type=t,this.prev=n}(t,n,e.indentStack)}var a=new RegExp(/^(?:[-+]i|[-+][01]+#*(?:\/[01]+#*)?i|[-+]?[01]+#*(?:\/[01]+#*)?@[-+]?[01]+#*(?:\/[01]+#*)?|[-+]?[01]+#*(?:\/[01]+#*)?[-+](?:[01]+#*(?:\/[01]+#*)?)?i|[-+]?[01]+#*(?:\/[01]+#*)?)(?=[()\s;"]|$)/i),c=new RegExp(/^(?:[-+]i|[-+][0-7]+#*(?:\/[0-7]+#*)?i|[-+]?[0-7]+#*(?:\/[0-7]+#*)?@[-+]?[0-7]+#*(?:\/[0-7]+#*)?|[-+]?[0-7]+#*(?:\/[0-7]+#*)?[-+](?:[0-7]+#*(?:\/[0-7]+#*)?)?i|[-+]?[0-7]+#*(?:\/[0-7]+#*)?)(?=[()\s;"]|$)/i),o=new RegExp(/^(?:[-+]i|[-+][\da-f]+#*(?:\/[\da-f]+#*)?i|[-+]?[\da-f]+#*(?:\/[\da-f]+#*)?@[-+]?[\da-f]+#*(?:\/[\da-f]+#*)?|[-+]?[\da-f]+#*(?:\/[\da-f]+#*)?[-+](?:[\da-f]+#*(?:\/[\da-f]+#*)?)?i|[-+]?[\da-f]+#*(?:\/[\da-f]+#*)?)(?=[()\s;"]|$)/i),l=new RegExp(/^(?:[-+]i|[-+](?:(?:(?:\d+#+\.?#*|\d+\.\d*#*|\.\d+#*|\d+)(?:[esfdl][-+]?\d+)?)|\d+#*\/\d+#*)i|[-+]?(?:(?:(?:\d+#+\.?#*|\d+\.\d*#*|\.\d+#*|\d+)(?:[esfdl][-+]?\d+)?)|\d+#*\/\d+#*)@[-+]?(?:(?:(?:\d+#+\.?#*|\d+\.\d*#*|\.\d+#*|\d+)(?:[esfdl][-+]?\d+)?)|\d+#*\/\d+#*)|[-+]?(?:(?:(?:\d+#+\.?#*|\d+\.\d*#*|\.\d+#*|\d+)(?:[esfdl][-+]?\d+)?)|\d+#*\/\d+#*)[-+](?:(?:(?:\d+#+\.?#*|\d+\.\d*#*|\.\d+#*|\d+)(?:[esfdl][-+]?\d+)?)|\d+#*\/\d+#*)?i|(?:(?:(?:\d+#+\.?#*|\d+\.\d*#*|\.\d+#*|\d+)(?:[esfdl][-+]?\d+)?)|\d+#*\/\d+#*))(?=[()\s;"]|$)/i);function s(e){return e.match(a)}function d(e){return e.match(c)}function u(e,t){return!0===t&&e.backUp(1),e.match(l)}function m(e){return e.match(o)}return{startState:function(){return{indentStack:null,indentation:0,mode:!1,sExprComment:!1}},token:function(t,a){if(null==a.indentStack&&t.sol()&&(a.indentation=t.indentation()),t.eatSpace())return null;var c=null;switch(a.mode){case"string":for(var o=!1;null!=(l=t.next());){if('"'==l&&!o){a.mode=!1;break}o=!o&&"\\"==l}c="string";break;case"comment":for(var l,p=!1;null!=(l=t.next());){if("#"==l&&p){a.mode=!1;break}p="|"==l}c=e;break;case"s-expr-comment":if(a.mode=!1,"("!=t.peek()&&"["!=t.peek()){t.eatWhile(/[^/s]/),c=e;break}a.sExprComment=0;default:var f=t.next();if('"'==f)a.mode="string",c="string";else if("'"==f)c="atom";else if("#"==f)if(t.eat("|"))a.mode="comment",c=e;else if(t.eat(/[tf]/i))c="atom";else if(t.eat(";"))a.mode="s-expr-comment",c=e;else{var h=null,g=!1,b=!0;t.eat(/[ei]/i)?g=!0:t.backUp(1),t.match(/^#b/i)?h=s:t.match(/^#o/i)?h=d:t.match(/^#x/i)?h=m:t.match(/^#d/i)?h=u:t.match(/^[-+0-9.]/,!1)?(b=!1,h=u):g||t.eat("#"),null!=h&&(b&&!g&&t.match(/^#[ei]/i),h(t)&&(c="number"))}else if(/^[-+0-9.]/.test(f)&&u(t,!0))c="number";else if(";"==f)t.skipToEnd(),c=e;else if("("==f||"["==f){for(var x,v="",k=t.column();null!=(x=t.eat(/[^\s\(\[\;\)\]]/));)v+=x;v.length>0&&r.propertyIsEnumerable(v)?i(a,k+2,f):(t.eatSpace(),t.eol()||";"==t.peek()?i(a,k+1,f):i(a,k+t.current().length,f)),t.backUp(t.current().length-1),"number"==typeof a.sExprComment&&a.sExprComment++,c="bracket"}else")"==f||"]"==f?(c="bracket",null!=a.indentStack&&a.indentStack.type==(")"==f?"(":"[")&&((y=a).indentStack=y.indentStack.prev,"number"==typeof a.sExprComment&&0==--a.sExprComment&&(c=e,a.sExprComment=!1))):(t.eatWhile(/[\w_\-!$%&*+\.\/:<=>?@\^~]/),c=n&&n.propertyIsEnumerable(t.current())?"builtin":"variable")}var y;return"number"==typeof a.sExprComment?e:c},indent:function(e){return null==e.indentStack?e.indentation:e.indentStack.indent},closeBrackets:{pairs:'()[]{}""'},lineComment:";;"}}),e.defineMIME("text/x-scheme","scheme")});