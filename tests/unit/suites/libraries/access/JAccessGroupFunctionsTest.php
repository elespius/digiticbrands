<?php
/**
 * @package	    Joomla.UnitTest
 * @subpackage  Menu
 *
 * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved.
 * @license	    GNU General Public License version 2 or later; see LICENSE
 */

jimport('joomla.user.user');
jimport('joomla.user.helper');

/**
 * Test class for JMenuSite.
 * Generated by PHPUnit on 2012-07-26 at 20:37:58.
 */
class JAccessGroupFunctions extends TestCaseDatabase
{
	/**
	 * @var default groups
	 */
	protected $groups = Array( 1 => 'Public',
							   2 => 'Registered',
							   3 => 'Author',
							   4 => 'Editor',
							   5 => 'Publisher',
							   6 => 'Manager',
							   7 => 'Administrator',
							   8 => 'Super Users',
							   10 => 'Invoice Author',
							   12 => 'Customer Group',
							   13 => 'Guest',
							   );

	/**
	 * @var core actions
	 */
	protected $core_actions = Array( "core.admin", "core.manage",
									 "core.create", "core.delete",
									 "core.edit", "core.edit.own", "core.edit.state" );

	/**
	 * @var string representation of default root rule
	 */
	protected $reference_root_rule = '{"core.login.site":{"6":1,"2":1},"core.login.admin":{"6":1},"core.admin":{"8":1},"core.manage":{"7":1},"core.create":{"6":1,"3":1},"core.delete":{"6":1},"core.edit":{"6":1,"4":1},"core.edit.state":{"6":1,"5":1},"core.edit.own":{"6":1,"3":1}}';


	/**
	 * Gets the data set to be loaded into the database during setup
	 */
	protected function getDataSet()
	{
		return $this->createXMLDataSet(__DIR__ . '/data/JGroupHelperTest.xml');
	}


	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp()
	{
		parent::setUp();

		// Get the mocks
		$this->saveFactoryState();
		JFactory::$session = $this->getMockSession();
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown()
	{
	}

	
	/**
	 * Verifies that we have the expected groups
	 *
	 * This function also tests the getGroupId function
	 */
	public function testVerifyGroups()
	{
		foreach ($this->groups as $gid => $group_name)
		{
			$group_id = JAccess::getGroupId($group_name);
			$this->assertEquals($gid, $group_id, "Failed group ID round trip test (id $gid: $group_name)" );
		}
	}


	/**
	 * Test the JAccess::lowestAncestorGroup($groups)
	 */
	public function testLowestGroupAncestor()
	{
		// 1  => 'Public'
        // 13 =>     'Guest' (same permissions as Public)
		// 6  =>     'Manager'
		// 7  =>        'Administrator'
		// 2  =>     'Registered'
		// 12 =>         'Customer Group' (same permissions as Registered)
		// 3  =>         'Author'
		// 10 =>             'Invoice Author' (same permissions as Author)
		// 4  =>             'Editor'
		// 5  =>                  'Publisher'
		// 8  => 'Super Users'

		$errmsg = "Test1 (1, 3, 5): All in the same line of ancestry ==> 1";
		$this->assertEquals(1, JAccess::lowestAncestorGroup(Array(1, 3, 5)), $errmsg);
		
		$errmsg = "Test2 (3, 4, 5): All in the same line of ancestry ==> 3";
		$this->assertEquals(3, JAccess::lowestAncestorGroup(Array(3, 4, 5)), $errmsg);

		$errmsg = "Test3 (6, 4): Not in the same line of ancestry, return null";
		$this->assertNull(JAccess::lowestAncestorGroup(Array(6, 4)), $errmsg);

		$errmsg = "Test4 (3, 12): Since 3 and 12 are at the same level, fail";
		$this->assertNull(JAccess::lowestAncestorGroup(Array(3, 12)), $errmsg);

		$errmsg = "Test5 (10, 12): 10 and 12 are on differente lines, fail";
		$this->assertNull(JAccess::lowestAncestorGroup(Array(10, 12)), $errmsg);
		
		$errmsg = "Test6 (1, 2, 12): All in the same line of ancestry ==> 1";
		$this->assertEquals(1, JAccess::lowestAncestorGroup(Array(1, 2, 12)), $errmsg);
		
		$errmsg = "Test7 (3, 10): 3 is 10's parent ==> 3";
		$this->assertEquals(3, JAccess::lowestAncestorGroup(Array(3, 10)), $errmsg);
	}



}