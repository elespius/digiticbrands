<?php
/**
 * @package	    Joomla.UnitTest
 * @subpackage  Menu
 *
 * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved.
 * @license	    GNU General Public License version 2 or later; see LICENSE
 */

jimport('joomla.user.user');
jimport('joomla.user.helper');

/**
 * Test class for JMenuSite.
 * Generated by PHPUnit on 2012-07-26 at 20:37:58.
 */
class JAccessDefaultRulesTest extends TestCaseDatabase
{
	/**
	 * @var default groups
	 */
	protected $groups = Array( 1 => 'Public',
							   6 => 'Manager',
							   7 => 'Administrator',
							   2 => 'Registered',
							   3 => 'Author',
							   4 => 'Editor',
							   5 => 'Publisher',
							   8 => 'Super Users',
							   );

	/**
	 * @var core actions
	 */
	protected $core_actions = Array( "core.admin", "core.manage",
									 "core.create", "core.delete",
									 "core.edit", "core.edit.own", "core.edit.state" );

	/**
	 * @var
	 */
	protected $reference_root_rule = '{"core.login.site":{"6":1,"2":1},"core.login.admin":{"6":1},"core.admin":{"8":1},"core.manage":{"7":1},"core.create":{"6":1,"3":1},"core.delete":{"6":1},"core.edit":{"6":1,"4":1},"core.edit.state":{"6":1,"5":1},"core.edit.own":{"6":1,"3":1}}';


	/**
	 * Gets the data set to be loaded into the database during setup
	 */
	protected function getDataSet()
	{
		return $this->createXMLDataSet(__DIR__ . '/data/JAccessTest.xml');
	}


	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp()
	{
		parent::setUp();

		// Get the mocks
		$this->saveFactoryState();
		JFactory::$session = $this->getMockSession();
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown()
	{
	}


	/**
	 * Get a copy of the root/default access rule
	 *
	 * @return JAccessRules a copy of the root/default access rule
	 */
	protected function getDefaultRule()
	{
		// Save a copy of the root rule for reference
		$root = JTable::getInstance('asset');
		$root->loadByName('root.1');
		return new JAccessRules($root->rules);
	}

	/**
	 * Get the current default permissions for a set of actions
	 */
	protected function getDefaultPermissions($actions)
	{
		$perms = Array();

		foreach ($actions as $action)
		{
			$perms[$action] = Array();

			foreach ($this->groups as $gid => $group_name)
			{
				$perms[$action][$gid] = JAccess::checkGroup($gid, $action);
			}
			
		}

		return $perms;
	}
	
	/**
	 * Verifies that we have the expected groups
	 */
	public function testVerifyGroups()
	{
		foreach ($this->groups as $gid => $group_name)
		{
			$group_id = JAccess::getGroupId($group_name);
			$this->assertEquals($gid, $group_id, "Failed group ID round trip test (id $gid: $group_name)" );
		}
	}

	public function testVerifyRootRule()
	{
		$this->assertEquals((string)$this->getDefaultRule(),
							$this->reference_root_rule,
							'Default rules do not match expected value');
	}

	/**
	 * testInstallRules1
	 */
	public function testInstallAccess1()
	{
		$all_actions = $this->core_actions;
		$all_actions[] = 'example.default';

		// Get the pristine, unmodified default permissions
		$initial_permissions = $this->getDefaultPermissions($all_actions);

		// Install the new default rules form access1.xml
		JAccess::installComponentDefaultRules('com_example', __DIR__ . '/data/access1.xml');

		// Get the modified permissions
		$modified_permissions = $this->getDefaultPermissions($all_actions);

		// None of the core rules should have changed
		foreach ($this->core_actions as $action)
		{
			foreach ($this->groups as $gid => $group_name)
			{
				$perm_init = $initial_permissions[$action][$gid];
				$perm_mod  = $modified_permissions[$action][$gid];
				$errmsg = "Core rule '$action' for group '$group_name' modified by installing 'access1.xml'";
				$this->assertEquals($perm_mod, $perm_init, $errmsg);
			}
		}

		// Verify the default rule is denied for all
		$action = 'example.default';
		foreach ($this->groups as $gid => $group_name)
		{
			$perm_init = $initial_permissions[$action][$gid];
			$errmsg1 = "unmodified custom action '$action' is allowed for group '$group_name'";
			$this->assertEquals($perm_init, false, $errmsg1);
			$perm_mod  = $modified_permissions[$action][$gid];
			$errmsg2 = "default custom action '$action' for group '$group_name' modified by installing 'access1.xml'";
			$this->assertEquals($perm_mod, $perm_init, $errmsg2);
		}

		// ??? CHECK MORE RULES HERE!


		// Purge the new default rules
		JAccess::purgeComponentDefaultRules('com_example');

		// Get the final, hopefully reverted permissions
		$final_permissions = $this->getDefaultPermissions($all_actions);

		// None of the core rules should have changed
		foreach ($all_actions as $action)
		{
			foreach ($this->groups as $gid => $group_name)
			{
				$perm_init = $initial_permissions[$action][$gid];
				$perm_final = $final_permissions[$action][$gid];
				$errmsg = "Action '$action' for group '$group_name' was not reverted when purging custom rules";
				$this->assertEquals($perm_final, $perm_init, $errmsg);
			}
		}

	}


}